import React, { useState } from 'react';
import './Style.css';

const Approval_Page = () => {
    const initialPayrollData = [
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '97ss8', employeeName: 'Jane Smith', amount: '24000', status: 'Pending' },
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1000', status: 'Pending' },
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '2822', employeeName: 'John Doe', amount: '1500', status: 'Pending' }
        
    ];
    const [payrollData, setPayrollData] = useState(initialPayrollData);
    const [processingIndexes, setProcessingIndexes] = useState([]); // Track processing state for each row

    const handleApprove = (index) => {
        setProcessingIndexes(prevIndexes => [...prevIndexes, index]); // Start processing for the specific index

        // Simulate payment processing
        setTimeout(() => {
            setProcessingIndexes(prevIndexes => prevIndexes.filter(i => i !== index)); // Finish processing for the index
            const updatedData = [...payrollData];
            updatedData[index].status = 'Approved';
            setPayrollData(updatedData);
        }, 3000); // Change the delay to your desired processing time in milliseconds
    };


    const handleReject = (index) => {
        const isConfirmed = window.confirm("Are you sure you want to reject this Payroll?");
        if (isConfirmed) {
            const updatedData = [...payrollData];
            updatedData.splice(index, 1);
            setPayrollData(updatedData);
        }
    };
    
    const handlehold = (index) => {
      const updatedData = [...payrollData];
      if(updatedData[index].status === "Approved"){
        updatedData[index].status = "Approved";
        
      }
      else if(updatedData[index].status === "Pending"){
        updatedData[index].status = "On Hold";
      }
      else{
        updatedData[index].status = "Pending"
        
      }
      
      setPayrollData(updatedData);
    };



    return (
        <div>
            <div id="header">
                <h1>Payroll Approval</h1>
            </div>
            <div className="container">
                <table>
                    <thead>
                    <tr>
                            <th>Batch Number</th>
                            <th>Employee Name</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {payrollData.map((row, index) => (
                            <tr key={index}>
                                <td>{row.batchNumber}</td>
                                <td>{row.employeeName}</td>
                                <td>{row.amount}</td>
                                <td>{row.status}</td>
                                <td>
                                    <button
                                        className="approve-btn"
                                        onClick={() => handleApprove(index)}
                                        disabled={processingIndexes.includes(index)}
                                    >
                                        Approve
                                    </button>
                                    <button className ="reject-btn ms-3" onClick={() => handleReject(index)}>{row.status === "Approved"?"Delete":"Reject"}</button>
                                    <button className="hold-btn ms-3" onClick={() => handlehold(index)}>{row.status === "On Hold"?"Unhold":"Hold"}</button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            {processingIndexes.length > 0 && (
                <div className="overlay">
                    <div className="processing-container animated fadeInUp scaleIn d-flex flex-column justify-content-center">
                        <h2>Processing...</h2>
                    </div>
                </div>
            )}
        </div>
    );
};

export default Approval_Page;


