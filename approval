<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Payroll Approval</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f0f0f0;
        }

        #header {
            background-color: #1976d2;
            color: white;
            text-align: center;
            padding: 1rem;
        }

        .container {
            width: 100%;
            padding: 1rem;
            background-color: white;
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 4px;
            box-sizing: border-box;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        th,
        td {
            padding: 0.5rem;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        th {
            background-color: #f5f5f5;
        }

        .approve-btn,
        .reject-btn {
            background-color: #4caf50;
            color: white;
            border: none;
            padding: 0.2rem 0.5rem;
            border-radius: 4px;
            cursor: pointer;
        }

        .reject-btn {
            background-color: #f44336;
            margin-top: 0.5rem;
        }

        @media screen and (max-width: 600px) {
            .container {
                padding: 0.5rem;
            }

            table {
                font-size: 14px;
            }

            th,
            td {
                padding: 0.3rem;
            }
        }
    </style>
</head>

<body>
    <div id="header">
        <h1>Payroll Approval</h1>
    </div>
    <div class="container">
        <table>
            <thead>
                <tr>
                    <th>Batch Number</th>
                    <th>Employee Name</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>20230822</td>
                    <td>John Doe</td>
                    <td>$1500</td>
                    <td>Pending</td>
                    <td>
                        <button class="approve-btn">Approve</button>
                        <button class="reject-btn">Reject</button>
                    </td>
                </tr>
                <tr>
                    <td>20230822</td>
                    <td>Jane Smith</td>
                    <td>$2000</td>
                    <td>Approved</td>
                    <td>
                        <button class="approve-btn">Approve</button>
                        <button class="reject-btn">Reject</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</body>

</html>




import React, { useState, useEffect } from 'react';
import axios from 'axios';

function MyComponent() {
  const [data, setData] = useState([]);

  useEffect(() => {
    // Fetch data when the component mounts
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await axios.get('https://api.example.com/data'); // Replace with your API URL
      setData(response.data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  return (
    <div>
      <h1>My Data</h1>
      <ul>
        {data.map(item => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>
    </div>
  );
}

export default MyComponent;



<script>
        document.addEventListener("DOMContentLoaded", function () {
            const rejectButtons = document.querySelectorAll(".reject-btn");

            rejectButtons.forEach(button => {
                button.addEventListener("click", function () {
                    const row = this.closest("tr");
                    const isConfirmed = confirm("Are you sure you want to reject this Payroll?");
                    if (isConfirmed) {
                        row.remove();
                    }
                });
            });
        });
    </script>






import React, { useState } from 'react';

const PayrollApproval = () => {
    const [payrollData, setPayrollData] = useState([
        { batchNumber: '20230822', employeeName: 'John Doe', amount: '$1500', status: 'Pending' },
        { batchNumber: '20230822', employeeName: 'Jane Smith', amount: '$2000', status: 'Approved' },
        // ... add more payroll data here
    ]);

    const handleReject = (index) => {
        const isConfirmed = window.confirm("Are you sure you want to reject this Payroll?");
        if (isConfirmed) {
            const updatedData = [...payrollData];
            updatedData.splice(index, 1);
            setPayrollData(updatedData);
        }
    };

    return (
        <div>
            <div id="header">
                <h1>Payroll Approval</h1>
            </div>
            <div className="container">
                <table>
                    <thead>
                        <tr>
                            <th>Batch Number</th>
                            <th>Employee Name</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {payrollData.map((row, index) => (
                            <tr key={index}>
                                <td>{row.batchNumber}</td>
                                <td>{row.employeeName}</td>
                                <td>{row.amount}</td>
                                <td>{row.status}</td>
                                <td>
                                    <button className="approve-btn">Approve</button>
                                    <button className="reject-btn" onClick={() => handleReject(index)}>Reject</button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default PayrollApproval;





import React, { useState, useEffect } from "react";
import fetch from "../Api's/fetch";
import "./Style.css";
import axios from "axios";
const PayrollApproval = () => {
    
    let lst = [
        { batchNumber: '20230822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '978', employeeName: 'Jane Smith', amount: '24000', status: 'Pending' }
        // ... add more payroll data here
    ]
    const [payrollData, setPayrollData] = useState(lst);

    const getProfile = (data) => {
        const base_url = "http://localhost:8090/api";
        axios.get(`${base_url}/customer/details`).then(
    
          (response) => {
    
            console.log(response.data[2].password);
    
            //console.log(data);
    
            // setProfile({
    
            //   name: response.data.name,
    
            //   email: response.data.email,
    
            //   company_id: response.data.company_id,
    
            //   password: response.data.password,
    
            //   username: response.data.username,
    
            //   id: response.data.id,
    
            //   company_name: response.data.company_name,
    
            // });
    
          },
          (error) => {
    
            console.log(error);
    
          }
    
        );
    
      };
    
    
    
    
      useEffect(() => {
    
        getProfile(); //here we have to give username from login
    
      }, []);
    
    
    











    

    const handleReject = (index) => {
        const isConfirmed = window.confirm("Are you sure you want to reject this Payroll?");
        if (isConfirmed) {
            const updatedData = [...payrollData];
            updatedData.splice(index, 1);
            setPayrollData(updatedData);
        }
    };
    
    const handlehold = (index) => {
      const updatedData = [...payrollData];
      if(updatedData[index].status === "Pending"){
        updatedData[index].status = "On Hold";
      }
      else{
        updatedData[index].status = "Pending"
        
      }
      
      setPayrollData(updatedData);
    };

    return (
        <div>
            <div id="header">
                <h1>Payroll Approval</h1>
            </div>
            <div className="container">
                <table>
                    <thead>
                        <tr>
                            <th>Batch Number</th>
                            <th>Employee Name</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {payrollData.map((row, index) => (
                            <tr key={index}>
                                <td>{row.batchNumber}</td>
                                <td>{row.employeeName}</td>
                                <td>{row.amount}</td>
                                <td>{row.status}</td>

                                <td >
                                    

                                    <button className="approve-btn">Approve</button>
                                    <button className ="reject-btn ms-3" onClick={() => handleReject(index)}>Reject</button>
                                    <button className="hold-btn ms-3" onClick={() => handlehold(index)}>{row.status === 'Pending'?"  Hold ":'Unhold'}</button>
                                
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        </div>
    );
};

export default PayrollApproval;










import React, { useState, useEffect } from "react";
import axios from "axios";
import "./PayrollApproval.css";

const PayrollApproval = () => {
    const [payrollData, setPayrollData] = useState([
        { batchNumber: '20230822', employeeName: 'John Doe', amount: '1500', status: 'Pending' },
        { batchNumber: '978', employeeName: 'Jane Smith', amount: '24000', status: 'Pending' }
    ]);
    const [processingIndex, setProcessingIndex] = useState(null);

    const getProfile = () => {
        const base_url = "http://localhost:8090/api";
        axios.get(`${base_url}/customer/details`).then(
            (response) => {
                console.log(response.data[2].password);
            },
            (error) => {
                console.log(error);
            }
        );
    };

    useEffect(() => {
        getProfile();
    }, []);

    const handleApprove = async (index) => {
        setProcessingIndex(index);
        
        try {
            // Simulate payment processing or perform API call here
            await new Promise(resolve => setTimeout(resolve, 3000));

            const updatedData = [...payrollData];
            updatedData[index].status = 'Approved';
            setPayrollData(updatedData);
        } catch (error) {
            console.error("Error during payment processing:", error);
        } finally {
            setProcessingIndex(null);
        }
    };

    const handleReject = (index) => {
        const isConfirmed = window.confirm("Are you sure you want to reject this Payroll?");
        if (isConfirmed) {
            const updatedData = [...payrollData];
            updatedData.splice(index, 1);
            setPayrollData(updatedData);
        }
    };

    const handlehold = (index) => {
        const updatedData = [...payrollData];
        if(updatedData[index].status === "Pending"){
            updatedData[index].status = "On Hold";
        } else {
            updatedData[index].status = "Pending";
        }
        setPayrollData(updatedData);
    };

    return (
        <div>
            <div id="header">
                <h1>Payroll Approval</h1>
            </div>
            <div className="container">
                <table>
                    <thead>
                        <tr>
                            <th>Batch Number</th>
                            <th>Employee Name</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {payrollData.map((row, index) => (
                            <tr key={index}>
                                <td>{row.batchNumber}</td>
                                <td>{row.employeeName}</td>
                                <td>{row.amount}</td>
                                <td>{row.status}</td>
                                <td>
                                    <button className="approve-btn" onClick={() => handleApprove(index)}>Approve</button>
                                    <button className="reject-btn ms-3" onClick={() => handleReject(index)}>Reject</button>
                                    <button className="hold-btn ms-3" onClick={() => handlehold(index)}>
                                        {row.status === 'Pending' ? "Hold" : "Unhold"}
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            <div className={`processing-overlay ${processingIndex !== null ? 'active' : ''}`}>
                <div className="processing-container">
                    <h2>Payment Processing...</h2>
                </div>
            </div>
        </div>
    );
};

export default PayrollApproval;



import React, { useState } from 'react';
import './PayrollApproval.css'; // Make sure to import your CSS file

const PayrollApproval = () => {
    const [payrollData, setPayrollData] = useState([
        { batchNumber: '20230822', employeeName: 'John Doe', amount: '$1500', status: 'Pending' },
        { batchNumber: '20230822', employeeName: 'Jane Smith', amount: '$2000', status: 'Pending' },
        // ... add more payroll data here
    ]);
    const [isProcessing, setIsProcessing] = useState(false);

    const handleApprove = () => {
        setIsProcessing(true);

        // Simulate payment processing
        setTimeout(() => {
            setIsProcessing(false);

            // Update the status to 'Approved' or perform other actions
            // You can access the payrollData array to update specific data
        }, 3000); // Change the delay to your desired processing time in milliseconds
    };

    return (
        <div>
            <div id="header">
                <h1>Payroll Approval</h1>
            </div>
            <div className="container">
                <table>
                    <thead>
                        <tr>
                            <th>Batch Number</th>
                            <th>Employee Name</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {payrollData.map((row, index) => (
                            <tr key={index}>
                                <td>{row.batchNumber}</td>
                                <td>{row.employeeName}</td>
                                <td>{row.amount}</td>
                                <td>{row.status}</td>
                                <td>
                                    <button
                                        className="approve-btn"
                                        onClick={handleApprove}
                                        disabled={isProcessing}
                                    >
                                        Approve
                                    </button>
                                    {/* Add other buttons here */}
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
            {isProcessing && (
                <div className="overlay">
                    <div className="processing-container">
                        <h2>Processing...</h2>
                    </div>
                </div>
            )}
        </div>
    );
};

export default PayrollApproval;


